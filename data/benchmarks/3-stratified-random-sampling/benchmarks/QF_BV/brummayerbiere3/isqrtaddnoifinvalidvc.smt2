(set-info :smt-lib-version 2.6)
(set-logic QF_BV)
(set-info :source |
Integer square root algorithm isqrt(x), where x is an unsigned 32 bit integer.
From the book "Hacker's delight" by Henry S. Warren, Jr., page 210
We use a variant of the algorithm that does not use an "if" inside the loop,
and uses "add" on m instead of "or".

We try to show the invalid verification condition:
y^2 == x or (y^2 < x and (y+1)^2 > x) holds, where y is the result.

Contributed by Robert Brummayer (robert.brummayer@gmail.com)
|)
(set-info :category "crafted")
(set-info :status sat)
(declare-fun x () (_ BitVec 32))
(assert (let ((?v_1 (bvadd (_ bv0 32) (_ bv1073741824 32))) (?v_0 ((_ zero_extend 27) (_ bv1 5))) (?v_6 ((_ zero_extend 27) (_ bv31 5)))) (let ((?v_2 (bvashr (bvor x (bvnot (bvsub x ?v_1))) ?v_6))) (let ((?v_3 (bvsub x (bvand ?v_1 ?v_2))) (?v_4 (bvadd (bvlshr (_ bv0 32) ?v_0) (bvand (_ bv1073741824 32) ?v_2))) (?v_7 ((_ zero_extend 27) (_ bv2 5)))) (let ((?v_5 (bvlshr (_ bv1073741824 32) ?v_7))) (let ((?v_8 (bvadd ?v_4 ?v_5))) (let ((?v_9 (bvashr (bvor ?v_3 (bvnot (bvsub ?v_3 ?v_8))) ?v_6))) (let ((?v_10 (bvsub ?v_3 (bvand ?v_8 ?v_9))) (?v_11 (bvadd (bvlshr ?v_4 ?v_0) (bvand ?v_5 ?v_9))) (?v_12 (bvlshr ?v_5 ?v_7))) (let ((?v_13 (bvadd ?v_11 ?v_12))) (let ((?v_14 (bvashr (bvor ?v_10 (bvnot (bvsub ?v_10 ?v_13))) ?v_6))) (let ((?v_15 (bvsub ?v_10 (bvand ?v_13 ?v_14))) (?v_16 (bvadd (bvlshr ?v_11 ?v_0) (bvand ?v_12 ?v_14))) (?v_17 (bvlshr ?v_12 ?v_7))) (let ((?v_18 (bvadd ?v_16 ?v_17))) (let ((?v_19 (bvashr (bvor ?v_15 (bvnot (bvsub ?v_15 ?v_18))) ?v_6))) (let ((?v_20 (bvsub ?v_15 (bvand ?v_18 ?v_19))) (?v_21 (bvadd (bvlshr ?v_16 ?v_0) (bvand ?v_17 ?v_19))) (?v_22 (bvlshr ?v_17 ?v_7))) (let ((?v_23 (bvadd ?v_21 ?v_22))) (let ((?v_24 (bvashr (bvor ?v_20 (bvnot (bvsub ?v_20 ?v_23))) ?v_6))) (let ((?v_25 (bvsub ?v_20 (bvand ?v_23 ?v_24))) (?v_26 (bvadd (bvlshr ?v_21 ?v_0) (bvand ?v_22 ?v_24))) (?v_27 (bvlshr ?v_22 ?v_7))) (let ((?v_28 (bvadd ?v_26 ?v_27))) (let ((?v_29 (bvashr (bvor ?v_25 (bvnot (bvsub ?v_25 ?v_28))) ?v_6))) (let ((?v_30 (bvsub ?v_25 (bvand ?v_28 ?v_29))) (?v_31 (bvadd (bvlshr ?v_26 ?v_0) (bvand ?v_27 ?v_29))) (?v_32 (bvlshr ?v_27 ?v_7))) (let ((?v_33 (bvadd ?v_31 ?v_32))) (let ((?v_34 (bvashr (bvor ?v_30 (bvnot (bvsub ?v_30 ?v_33))) ?v_6))) (let ((?v_35 (bvsub ?v_30 (bvand ?v_33 ?v_34))) (?v_36 (bvadd (bvlshr ?v_31 ?v_0) (bvand ?v_32 ?v_34))) (?v_37 (bvlshr ?v_32 ?v_7))) (let ((?v_38 (bvadd ?v_36 ?v_37))) (let ((?v_39 (bvashr (bvor ?v_35 (bvnot (bvsub ?v_35 ?v_38))) ?v_6))) (let ((?v_40 (bvsub ?v_35 (bvand ?v_38 ?v_39))) (?v_41 (bvadd (bvlshr ?v_36 ?v_0) (bvand ?v_37 ?v_39))) (?v_42 (bvlshr ?v_37 ?v_7))) (let ((?v_43 (bvadd ?v_41 ?v_42))) (let ((?v_44 (bvashr (bvor ?v_40 (bvnot (bvsub ?v_40 ?v_43))) ?v_6))) (let ((?v_45 (bvsub ?v_40 (bvand ?v_43 ?v_44))) (?v_46 (bvadd (bvlshr ?v_41 ?v_0) (bvand ?v_42 ?v_44))) (?v_47 (bvlshr ?v_42 ?v_7))) (let ((?v_48 (bvadd ?v_46 ?v_47))) (let ((?v_49 (bvashr (bvor ?v_45 (bvnot (bvsub ?v_45 ?v_48))) ?v_6))) (let ((?v_50 (bvsub ?v_45 (bvand ?v_48 ?v_49))) (?v_51 (bvadd (bvlshr ?v_46 ?v_0) (bvand ?v_47 ?v_49))) (?v_52 (bvlshr ?v_47 ?v_7))) (let ((?v_53 (bvadd ?v_51 ?v_52))) (let ((?v_54 (bvashr (bvor ?v_50 (bvnot (bvsub ?v_50 ?v_53))) ?v_6))) (let ((?v_55 (bvsub ?v_50 (bvand ?v_53 ?v_54))) (?v_56 (bvadd (bvlshr ?v_51 ?v_0) (bvand ?v_52 ?v_54))) (?v_57 (bvlshr ?v_52 ?v_7))) (let ((?v_58 (bvadd ?v_56 ?v_57))) (let ((?v_59 (bvashr (bvor ?v_55 (bvnot (bvsub ?v_55 ?v_58))) ?v_6))) (let ((?v_60 (bvsub ?v_55 (bvand ?v_58 ?v_59))) (?v_61 (bvadd (bvlshr ?v_56 ?v_0) (bvand ?v_57 ?v_59))) (?v_62 (bvlshr ?v_57 ?v_7))) (let ((?v_63 (bvadd ?v_61 ?v_62))) (let ((?v_64 (bvashr (bvor ?v_60 (bvnot (bvsub ?v_60 ?v_63))) ?v_6))) (let ((?v_65 (bvsub ?v_60 (bvand ?v_63 ?v_64))) (?v_66 (bvadd (bvlshr ?v_61 ?v_0) (bvand ?v_62 ?v_64))) (?v_67 (bvlshr ?v_62 ?v_7))) (let ((?v_68 (bvadd ?v_66 ?v_67))) (let ((?v_69 (bvashr (bvor ?v_65 (bvnot (bvsub ?v_65 ?v_68))) ?v_6))) (let ((?v_70 (bvsub ?v_65 (bvand ?v_68 ?v_69))) (?v_71 (bvadd (bvlshr ?v_66 ?v_0) (bvand ?v_67 ?v_69))) (?v_72 (bvlshr ?v_67 ?v_7))) (let ((?v_73 (bvadd ?v_71 ?v_72))) (let ((?v_74 (bvashr (bvor ?v_70 (bvnot (bvsub ?v_70 ?v_73))) ?v_6))) (let ((?v_75 (bvsub ?v_70 (bvand ?v_73 ?v_74))) (?v_76 (bvadd (bvlshr ?v_71 ?v_0) (bvand ?v_72 ?v_74))) (?v_77 (bvlshr ?v_72 ?v_7))) (let ((?v_78 (bvadd (bvlshr ?v_76 ?v_0) (bvand ?v_77 (bvashr (bvor ?v_75 (bvnot (bvsub ?v_75 (bvadd ?v_76 ?v_77)))) ?v_6))))) (let ((?v_79 (bvmul ?v_78 ?v_78)) (?v_80 (bvadd ?v_78 (_ bv1 32)))) (not (= (bvnot (bvor (ite (= x ?v_79) (_ bv1 1) (_ bv0 1)) (bvand (ite (bvult ?v_79 x) (_ bv1 1) (_ bv0 1)) (ite (bvult x (bvmul ?v_80 ?v_80)) (_ bv1 1) (_ bv0 1))))) (_ bv0 1))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
